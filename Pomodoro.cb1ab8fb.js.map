{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["class Pomodoro {\n    constructor(pomodoro, short, long){\n        this.pomodoro = JSON.parse(localStorage.getItem('pomodoroValue')) ?? pomodoro * 60;\n        this.short = JSON.parse(localStorage.getItem('shortValue')) ?? short * 60;\n        this.long = JSON.parse(localStorage.getItem('longValue')) ?? long * 60;\n        this.totalTime = this.pomodoro;\n        this.seconds = 0;\n        this.interval = null;\n        this.typeTimer = 'pomodoro';\n        this.numIterations = 0;\n        this.circumference = 2 * Math.PI * 145;\n        this.progressCircle = document.querySelector('.pomodoro__timer-progress');\n        this.timer = document.querySelector('.pomodoro__timer');\n        this.btnStart = document.querySelector('.functional__start');\n        this.btnReset = document.querySelector('.functional__reset');\n        this.form = document.querySelector('.form');\n        this.inputPomodoro = document.getElementById('pomodoro');\n        this.inputShort = document.getElementById('short');\n        this.inputLong = document.getElementById('long');\n        this.btnPomodoro = document.querySelector('.types-timers__pomodoro');\n        this.btnShort = document.querySelector('.types-timers__short');\n        this.btnLong = document.querySelector('.types-timers__long');\n        this.innerTypesTimers = document.querySelector('.pomodoro__types-timers');\n        this.notification = document.querySelector('.notification');\n        this.notificationText = document.querySelector('.notification__text');\n        this.btnsPomodoro = document.querySelectorAll('.pomodoro-btn');\n        this.modalSettings = document.querySelector('#modalSettings');\n        this.startListeners();\n        this.updateSeconds('pomodoro');\n    }\n    startListeners() {\n        this.btnStart.addEventListener('click', ()=>{\n            const isClassActive = this.btnStart.classList.contains('active');\n            if (isClassActive) {\n                this.btnStart.classList.remove('active');\n                this.stop();\n            } else {\n                this.btnStart.classList.add('active');\n                this.start();\n            }\n        });\n        this.btnReset.addEventListener('click', ()=>{\n            this.progressCircle.style.strokeDashoffset = 0;\n            this.updateSeconds('pomodoro');\n            this.stop();\n            this.changeActiveButton(this.btnPomodoro);\n            this.btnStart.classList.remove('active');\n        });\n        this.modalSettings.addEventListener('click', (e)=>{\n            const isTargetWrap = e.target.closest('.settings__wrap') === null;\n            if (isTargetWrap) this.closeModal();\n        });\n        this.form.addEventListener('submit', (e)=>{\n            e.preventDefault();\n            const isInputsValue = this.inputPomodoro.value < 1 || this.inputShort.value < 1 || this.inputLong.value < 1;\n            try {\n                if (isInputsValue) throw new Error('Incorrect number');\n                this.saveParameters();\n                this.updateParameters();\n                this.updateSeconds('pomodoro');\n                this.changeActiveButton(this.btnPomodoro);\n                this.renderTimer();\n                this.stop();\n                this.closeModal();\n                this.btnStart.classList.remove('active');\n                this.progressCircle.style.strokeDashoffset = 0;\n            } catch (err) {\n                this.showNotification(err);\n                this.closeModal();\n            }\n        });\n        this.innerTypesTimers.addEventListener('click', (e)=>{\n            const isNoInnerTypesTimers = e.target !== this.innerTypesTimers;\n            switch(e.target){\n                case this.btnPomodoro:\n                    this.changeActiveButton(this.btnPomodoro, 'pomodoro', true);\n                    break;\n                case this.btnShort:\n                    this.changeActiveButton(this.btnShort, 'short', true);\n                    break;\n                case this.btnLong:\n                    this.changeActiveButton(this.btnLong, 'long', true);\n                    break;\n            }\n            if (isNoInnerTypesTimers) {\n                this.progressCircle.style.strokeDashoffset = 0;\n                this.stop();\n                this.btnStart.classList.remove('active');\n            }\n        });\n    }\n    start() {\n        this.interval = setInterval(()=>{\n            if (this.seconds === 0) {\n                this.renderTimer();\n                this.switchTimer(this.typeTimer);\n            } else {\n                this.seconds = --this.seconds;\n                this.renderTimer();\n            }\n            const offset = this.circumference - this.seconds / this.totalTime * this.circumference;\n            this.progressCircle.style.strokeDashoffset = offset;\n        }, 1000);\n    }\n    calculationTiming() {\n        const calculationMinutes = Math.floor(this.seconds / 60);\n        const calculationSeconds = this.seconds % 60 === 0 ? '00' : `${this.seconds % 60 < 10 ? `0${this.seconds % 60}` : this.seconds % 60}`;\n        const result = `${calculationMinutes}:${calculationSeconds}`;\n        return result;\n    }\n    renderTimer() {\n        this.timer.textContent = `${this.calculationTiming()}`;\n    }\n    switchTimer(type) {\n        switch(type){\n            case 'pomodoro':\n                this.numIterations = ++this.numIterations;\n                this.seconds = this.short;\n                this.typeTimer = 'short';\n                this.totalTime = this.short;\n                if (this.numIterations === 4) {\n                    this.seconds = this.long;\n                    this.typeTimer = 'long';\n                    this.totalTime = this.long;\n                    this.numIterations = 0;\n                }\n                break;\n            case 'short':\n                this.seconds = this.pomodoro;\n                this.typeTimer = 'pomodoro';\n                this.totalTime = this.pomodoro;\n                break;\n            case 'long':\n                this.seconds = this.pomodoro;\n                this.typeTimer = 'pomodoro';\n                this.totalTime = this.pomodoro;\n                break;\n        }\n        switch(this.typeTimer){\n            case 'pomodoro':\n                this.changeActiveButton(this.btnPomodoro);\n                break;\n            case 'short':\n                this.changeActiveButton(this.btnShort);\n                break;\n            case 'long':\n                this.changeActiveButton(this.btnLong);\n                break;\n        }\n    }\n    stop() {\n        clearInterval(this.interval);\n    }\n    updateSeconds(type) {\n        this.typeTimer = type;\n        this.numIterations = 0;\n        this.seconds = this[type];\n        this.renderTimer();\n    }\n    calculationSecondsParameters(type) {\n        const result = type > 60 ? 3600 : type * 60;\n        return result;\n    }\n    updateParameters() {\n        this.pomodoro = this.calculationSecondsParameters(this.inputPomodoro.value);\n        this.short = this.calculationSecondsParameters(this.inputShort.value);\n        this.long = this.calculationSecondsParameters(this.inputLong.value);\n    }\n    saveParameters() {\n        localStorage.setItem('pomodoroValue', JSON.stringify(this.calculationSecondsParameters(this.inputPomodoro.value)));\n        localStorage.setItem('shortValue', JSON.stringify(this.calculationSecondsParameters(this.inputShort.value)));\n        localStorage.setItem('longValue', JSON.stringify(this.calculationSecondsParameters(this.inputLong.value)));\n    }\n    closeModal() {\n        this.modalSettings.close();\n    }\n    showNotification(err) {\n        this.notificationText.textContent = `${err.name}: ${err.message}`;\n        this.notification.classList.remove('active');\n        this.notification.classList.add('active');\n        setTimeout(()=>{\n            this.notification.classList.remove('active');\n        }, 3000);\n    }\n    removeClassActiveTimer() {\n        this.btnsPomodoro.forEach((el)=>{\n            el.classList.remove('activeTimer');\n        });\n    }\n    changeActiveButton(btn, typeTimer = null, click = false) {\n        this.removeClassActiveTimer();\n        btn.classList.add('activeTimer');\n        if (click) {\n            this.totalTime = this[typeTimer];\n            this.updateSeconds(typeTimer);\n        }\n    }\n}\nnew Pomodoro(25, 5, 15);\n\n//# sourceMappingURL=Pomodoro.cb1ab8fb.js.map\n","class Pomodoro {\r\n  constructor(pomodoro, short, long) {\r\n    this.pomodoro = JSON.parse(localStorage.getItem('pomodoroValue')) ?? pomodoro * 60;\r\n    this.short = JSON.parse(localStorage.getItem('shortValue')) ?? short * 60;\r\n    this.long = JSON.parse(localStorage.getItem('longValue')) ?? long * 60;\r\n\r\n    this.totalTime = this.pomodoro;\r\n    this.seconds = 0;\r\n    this.interval = null;\r\n    this.typeTimer = 'pomodoro';\r\n    this.numIterations = 0;\r\n    this.circumference = 2 * Math.PI * 145;\r\n\r\n    this.progressCircle = document.querySelector('.pomodoro__timer-progress');\r\n    this.timer = document.querySelector('.pomodoro__timer');\r\n    this.btnStart = document.querySelector('.functional__start');\r\n    this.btnReset = document.querySelector('.functional__reset');\r\n    this.form = document.querySelector('.form');\r\n    this.inputPomodoro = document.getElementById('pomodoro');\r\n    this.inputShort = document.getElementById('short');\r\n    this.inputLong = document.getElementById('long');\r\n    this.btnPomodoro = document.querySelector('.types-timers__pomodoro');\r\n    this.btnShort = document.querySelector('.types-timers__short');\r\n    this.btnLong = document.querySelector('.types-timers__long');\r\n    this.innerTypesTimers = document.querySelector('.pomodoro__types-timers');\r\n    this.notification = document.querySelector('.notification');\r\n    this.notificationText = document.querySelector('.notification__text');\r\n\r\n    this.btnsPomodoro = document.querySelectorAll('.pomodoro-btn');\r\n\r\n    this.modalSettings = document.querySelector('#modalSettings');\r\n\r\n    this.startListeners();\r\n    this.updateSeconds('pomodoro');\r\n  }\r\n\r\n  startListeners() {\r\n    this.btnStart.addEventListener('click', () => {\r\n      const isClassActive = this.btnStart.classList.contains('active');\r\n\r\n      if (isClassActive) {\r\n        this.btnStart.classList.remove('active');\r\n        this.stop();\r\n      } else {\r\n        this.btnStart.classList.add('active');\r\n        this.start();\r\n      }\r\n    });\r\n\r\n    this.btnReset.addEventListener('click', () => {\r\n      this.progressCircle.style.strokeDashoffset = 0;\r\n\r\n      this.updateSeconds('pomodoro');\r\n      this.stop();\r\n      this.changeActiveButton(this.btnPomodoro);\r\n\r\n      this.btnStart.classList.remove('active');\r\n    });\r\n\r\n    this.modalSettings.addEventListener('click', (e) => {\r\n      const isTargetWrap = e.target.closest('.settings__wrap') === null;\r\n\r\n      if (isTargetWrap) {\r\n        this.closeModal();\r\n      }\r\n    });\r\n\r\n    this.form.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      const isInputsValue = this.inputPomodoro.value < 1 || this.inputShort.value < 1 || this.inputLong.value < 1;\r\n\r\n      try {\r\n        if (isInputsValue) {\r\n          throw new Error('Incorrect number');\r\n        }\r\n\r\n        this.saveParameters();\r\n        this.updateParameters();\r\n        this.updateSeconds('pomodoro');\r\n        this.changeActiveButton(this.btnPomodoro);\r\n        this.renderTimer();\r\n        this.stop();\r\n        this.closeModal();\r\n\r\n        this.btnStart.classList.remove('active');\r\n        this.progressCircle.style.strokeDashoffset = 0;\r\n      } catch (err) {\r\n        this.showNotification(err);\r\n\r\n        this.closeModal();\r\n      }\r\n    });\r\n\r\n    this.innerTypesTimers.addEventListener('click', (e) => {\r\n      const isNoInnerTypesTimers = e.target !== this.innerTypesTimers;\r\n\r\n      switch (e.target) {\r\n        case this.btnPomodoro:\r\n          this.changeActiveButton(this.btnPomodoro, 'pomodoro', true);\r\n          break;\r\n        case this.btnShort:\r\n          this.changeActiveButton(this.btnShort, 'short', true);\r\n          break;\r\n        case this.btnLong:\r\n          this.changeActiveButton(this.btnLong, 'long', true);\r\n          break;\r\n      }\r\n\r\n      if (isNoInnerTypesTimers) {\r\n        this.progressCircle.style.strokeDashoffset = 0;\r\n        this.stop();\r\n        this.btnStart.classList.remove('active');\r\n      }\r\n    });\r\n  }\r\n\r\n  start() {\r\n    this.interval = setInterval(() => {\r\n      if (this.seconds === 0) {\r\n        this.renderTimer();\r\n\r\n        this.switchTimer(this.typeTimer);\r\n      } else {\r\n        this.seconds = --this.seconds;\r\n\r\n        this.renderTimer();\r\n      }\r\n\r\n      const offset = this.circumference - (this.seconds / this.totalTime) * this.circumference;\r\n      this.progressCircle.style.strokeDashoffset = offset;\r\n    }, 1000);\r\n  }\r\n\r\n  calculationTiming() {\r\n    const calculationMinutes = Math.floor(this.seconds / 60);\r\n    const calculationSeconds = this.seconds % 60 === 0 ? '00' : `${this.seconds % 60 < 10 ? `0${this.seconds % 60}` : this.seconds % 60}`;\r\n    const result = `${calculationMinutes}:${calculationSeconds}`;\r\n\r\n    return result;\r\n  }\r\n\r\n  renderTimer() {\r\n    this.timer.textContent = `${this.calculationTiming()}`;\r\n  }\r\n\r\n  switchTimer(type) {\r\n    switch (type) {\r\n      case 'pomodoro':\r\n        this.numIterations = ++this.numIterations;\r\n        this.seconds = this.short;\r\n        this.typeTimer = 'short';\r\n        this.totalTime = this.short;\r\n\r\n        if (this.numIterations === 4) {\r\n          this.seconds = this.long;\r\n          this.typeTimer = 'long';\r\n          this.totalTime = this.long;\r\n          this.numIterations = 0;\r\n        }\r\n\r\n        break;\r\n      case 'short':\r\n        this.seconds = this.pomodoro;\r\n        this.typeTimer = 'pomodoro';\r\n        this.totalTime = this.pomodoro;\r\n\r\n        break;\r\n      case 'long':\r\n        this.seconds = this.pomodoro;\r\n        this.typeTimer = 'pomodoro';\r\n        this.totalTime = this.pomodoro;\r\n\r\n        break;\r\n    }\r\n\r\n    switch (this.typeTimer) {\r\n      case 'pomodoro':\r\n        this.changeActiveButton(this.btnPomodoro);\r\n\r\n        break;\r\n      case 'short':\r\n        this.changeActiveButton(this.btnShort);\r\n\r\n        break;\r\n      case 'long':\r\n        this.changeActiveButton(this.btnLong);\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  updateSeconds(type) {\r\n    this.typeTimer = type;\r\n    this.numIterations = 0;\r\n    this.seconds = this[type];\r\n\r\n    this.renderTimer();\r\n  }\r\n\r\n  calculationSecondsParameters(type) {\r\n    const result = type > 60 ? 60 * 60 : type * 60;\r\n\r\n    return result;\r\n  }\r\n\r\n  updateParameters() {\r\n    this.pomodoro = this.calculationSecondsParameters(this.inputPomodoro.value);\r\n    this.short = this.calculationSecondsParameters(this.inputShort.value);\r\n    this.long = this.calculationSecondsParameters(this.inputLong.value);\r\n  }\r\n\r\n  saveParameters() {\r\n    localStorage.setItem('pomodoroValue', JSON.stringify(this.calculationSecondsParameters(this.inputPomodoro.value)));\r\n    localStorage.setItem('shortValue', JSON.stringify(this.calculationSecondsParameters(this.inputShort.value)));\r\n    localStorage.setItem('longValue', JSON.stringify(this.calculationSecondsParameters(this.inputLong.value)));\r\n  }\r\n\r\n  closeModal() {\r\n    this.modalSettings.close();\r\n  }\r\n\r\n  showNotification(err) {\r\n    this.notificationText.textContent = `${err.name}: ${err.message}`;\r\n\r\n    this.notification.classList.remove('active');\r\n    this.notification.classList.add('active');\r\n\r\n    setTimeout(() => {\r\n      this.notification.classList.remove('active');\r\n    }, 3000);\r\n  }\r\n\r\n  removeClassActiveTimer() {\r\n    this.btnsPomodoro.forEach((el) => {\r\n      el.classList.remove('activeTimer');\r\n    });\r\n  }\r\n\r\n  changeActiveButton(btn, typeTimer = null, click = false) {\r\n    this.removeClassActiveTimer();\r\n\r\n    btn.classList.add('activeTimer');\r\n\r\n    if (click) {\r\n      this.totalTime = this[typeTimer];\r\n      this.updateSeconds(typeTimer);\r\n    }\r\n  }\r\n}\r\n\r\nnew Pomodoro(25, 5, 15);\r\n"],"names":["Pomodoro","pomodoro","short","long","JSON","parse","localStorage","getItem","totalTime","seconds","interval","typeTimer","numIterations","circumference","Math","PI","progressCircle","document","querySelector","timer","btnStart","btnReset","form","inputPomodoro","getElementById","inputShort","inputLong","btnPomodoro","btnShort","btnLong","innerTypesTimers","notification","notificationText","btnsPomodoro","querySelectorAll","modalSettings","startListeners","updateSeconds","addEventListener","classList","contains","remove","stop","add","start","style","strokeDashoffset","changeActiveButton","e","isTargetWrap","target","closest","closeModal","preventDefault","isInputsValue","value","Error","saveParameters","updateParameters","renderTimer","err","showNotification","isNoInnerTypesTimers","setInterval","switchTimer","offset","calculationTiming","calculationMinutes","floor","calculationSeconds","textContent","type","clearInterval","calculationSecondsParameters","setItem","stringify","close","name","message","setTimeout","removeClassActiveTimer","forEach","el","btn","click"],"version":3,"file":"Pomodoro.cb1ab8fb.js.map"}